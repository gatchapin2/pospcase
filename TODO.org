#+SEQ_TODO: TODO(t!) NOTE(n!) | DONE(d!) HALT(h!)
* Bugs
** TODO Common lisp ~#~ reader macro notation cause read-from-string error "(invalid-read-syntax #)"
   - State "TODO"       from              [2018-11-18 Sun 18:56]

** TODO Known reader macros so far
   - State "TODO"       from              [2018-11-21 Wed 01:42]
   - #\char
   - #H() from cl21

** TODO replace-regex-in-string ideas [4/4]
   - State "TODO"       from              [2018-11-21 Wed 01:42]
   - [X] "#\\" -> " ?", a half assed char conversion
   - [X] "#[^ (]+(" -> "(", for cl21 hash
   - [X] "#p\"" -> "\"", pathname
   - [X] "#\\+" -> "  "
* Features
** TODO Use as much ~pcase~ as possible
   - State "TODO"       from              [2018-11-19 Mon 12:27]
** TODO elispification
   - State "TODO"       from              [2018-11-19 Mon 13:34]
** submatcher generator
   - Something like:

       (pospcase-font-lock â€™lisp-mode
                            '(`(defun ,name ,args))
                            '((name . font-lock-function-name-face)
                              ((args . `(,arg . ,_)))
                              ((arg . font-lock-function-name-face))))

     and it calls

       (goto-char (car args))
       (pospcase-font-lock-submatcher `(,arg . ,__))
** TODO add chop-off-p to pospcase-read
   - State "TODO"       from              [2018-11-21 Wed 05:44]

*** TODO detect trailing ". ,__)", attach closing parens for read-from-string

    - State "TODO"       from              [2018-11-21 Wed 05:44]
*** TODO use syntax-table

    - State "TODO"       from              [2018-11-23 Fri 08:49]

    (insert (make-string
         (car (parse-partial-sexp (point) (+ (point) 10)))
         ?\)))
    (foo (bar (baz (qux (quux
** TODO Should I add zero submatcher support? Should I implement ~pospcase-match-zero~?
   - State "TODO"       from              [2018-11-23 Fri 09:32]
** TODO define ~pospcase--after-open-paren~
   - State "TODO"       from              [2018-11-23 Fri 11:11]

     #+BEGIN_SRC emacs-lisp
       (let ((limit (point-max))
             (keyword "defun"))
         (when (search-forward keyword limit t)
           (let ((kw-begin (match-beginning 0))
                 (kw-end (match-end 0))
                 begin end)
             (and
              (looking-at "[ \t\n;]")
              (setq end (match-end 0))
              (search-backward "(" nil t)
              (setq begin (match-beginning 0))
              (progn
                (goto-char (match-end 0))
                (forward-comment most-positive-fixnum)
                (= (point) kw-begin))
              (set-match-data (list begin end
                                    kw-begin kw-end)))))
         (match-string 1))

       ;;; bar
       (
       ;;; foo
       defun foo (bar) baz)
     #+END_SRC
** TODO Primary matcher should use pcase too?
   - State "TODO"       from              [2018-11-23 Fri 14:13]

   - Example: `((or labels cl-labels) ,name ,args . ,__)
* Design guideline
** NOTE errors
   - State "NOTE"      from              [2018-11-22 Thu 10:32]

   - Generic functions like ~pospcase~, ~pospcase-at~, ~pospcase-read~
     shouldn't silently discard errors like ~scan-error~ for unmatched
     parenthesis, ~invalid-read-syntax~ for unparsable buffer segment
     even after elispification.

   - Externally exposed font-lock functions (submatchers, preform,
     postform, etc.) and macros should discard errors silently.

   - How about internal font-lock functions (iterator, etc)?
