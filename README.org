#+TITLE: ~pospcase~: A ~pcase~ variant for getting positional metadata

* About ~pospcase~
  ~pospcase~ is a package for extracting S-expression positions using
  ~pcase~ pattern matching ability.

  At this moment the package contains a pattern matcher ~pospcase~ and a
  minor-mode ~pospcase-lisp-font-lock-mode~, robust code highlighter for
  both ~lisp-mode~ and ~emacs-lisp-mode~.

* Rational
  Emacs’s font-locking heavily relies on regular expression
  (regexp). There’s already an attempt to do [[https://github.com/Lindydancer/lisp-extra-font-lock][extra highlighting]] for
  Lisp and Emacs Lisp. Which is completely regexp based too. When you
  look into his [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Search_002dbased-Fontification.html][anchored-matcher]], such as
  ~lisp-extra-font-lock-match-let,~ you’ll notice parsing S-expression
  with regexp is inherently awkward and error-prone (you also notice
  in-between comments break the regexp matching too, which is
  terrible). To overcome the problem, you basically have to call
  ~syntax-ppss~ and ~forward-comment~ everywhere. The product is
  unreadable hybrid of regexp and constant syntax-table checking.

  And recently Emacs got this nice pattern matching macro called
  ~pcase~. Nowadays You can easily match and destructure any kind of
  S-expression whenever you want.

  I suppose the above reasons are good enough to write a ~pcase~-based
  font-locker.

* Usage
  To turn of the font-lock, run:

  #+BEGIN_SRC emacs-lisp
    (require 'pospcase)
    (pospcase-global-lisp-font-lock-mode 1)
  #+END_SRC

  If you have some reason to get positions of S-expression in a
  buffer, you can use ~pospcase-at~ like this:

  #+BEGIN_SRC emacs-lisp
    (pospcase-at (point-min) '((`,exp exp)))
  #+END_SRC

  #+RESULTS:
  : (1 . 41)

  More detailed explanation can be found in ~pospcase-read~ docstring.
