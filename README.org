#+TITLE: ~pospcase~: A ~pcase~ variant for getting positional metadata

* About ~pospcase~
  ~pospcase~ is a package for extracting S-expression positions using
  ~pcase~ pattern matching ability.

  At this moment the package contains a pattern matcher ~pospcase~ and a
  minor-mode ~pospcase-lisp-font-lock-mode~, robust code highlighter for
  both ~lisp-mode~ and ~emacs-lisp-mode~.

* Rational
  Emacs’s font-locking heavily relies on regular expression
  (regexp). There’s already an attempt to do [[https://github.com/Lindydancer/lisp-extra-font-lock][extra highlighting]] for
  Lisp and Emacs Lisp. Which is completely regexp based too. When you
  look into his [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Search_002dbased-Fontification.html][anchored-matcher]], such as
  ~lisp-extra-font-lock-match-let,~ you’ll notice parsing S-expression
  with regexp is inherently awkward and error-prone (you also notice
  in-between comments break the regexp matching too, which is
  terrible). To overcome the problem, you basically have to call
  ~syntax-ppss~ and ~forward-comment~ everywhere. The product is
  unreadable hybrid of regexp matchings, constant syntax-table
  checkings, and corner-case coverings like:

  #+BEGIN_SRC emacs-lisp
    ;;; match and collect all symbol positions with the same nest level
    (let ((current-level (car (syntax-ppss))))

      ;; skip the starting non-symbol chars
      (skip-chars-forward "\\(?:\\sw\\|\\s_\\|\\s \\)")

      (cl-loop
       with result

       ;; return if the task ended or the `point' is out of scope
       when (or (eobp) (< (car (syntax-ppss)) current-level)) return result

       ;; actual matching
       do (progn
            (forward-comment most-positive-fixnum)
            (looking-at "\\_<\\(?:\\sw\\|\\s_\\)+\\_>"))

       ;; collect matched symbol's range in a cons pair
       if (= (car (syntax-ppss)) current-level)
       do (setq result (cons (cons (match-beginning 0) (match-end 0)) result))

       ;; skip non-interesting characters
       do (progn
            (goto-char (match-end 0))
            (skip-chars-forward "\\(?:\\sw\\|\\s_\\|\\s \\)"))))
  #+END_SRC

  Moreover, recently Emacs got this nice pattern matching macro called
  ~pcase~. Nowadays You can easily match and destructure any kind of
  S-expression whenever you want.

  I suppose the above reasons are good enough to write a ~pcase~-based
  font-locker.

* Usage
  To turn of the font-lock, run:

  #+BEGIN_SRC emacs-lisp
    (require 'pospcase)
    (pospcase-global-lisp-font-lock-mode 1)
  #+END_SRC

  If you have some reason to get positions of S-expression in a
  buffer, you can use ~pospcase-at~ like this:

  #+BEGIN_SRC emacs-lisp
    (pospcase-at (point-min) '((`,exp exp)))
  #+END_SRC

  #+RESULTS:
  : (1 . 41)

  More detailed explanation can be found in ~pospcase-read~ docstring.

* Limitation
  No support for nested binding list like:

  #+BEGIN_SRC emacs-lisp
    (let ((foo
           (let ((bar 'baz))
             bar)))
      foo)
  #+END_SRC

  But supports:

  #+BEGIN_SRC emacs-lisp
    (let ((foo 'bar))
      (let ((baz foo))
        baz))
  #+END_SRC

  and:

  #+BEGIN_SRC emacs-lisp
    (let ((foo
           (let* ((bar 'baz))
             bar)))
      foo)
  #+END_SRC

  Note that the last snippet use different two keywords ~let~ and ~let*~.

  This limitation is maybe due to my ignorance of font-lock
  internals. But I’m eager to fix it.
